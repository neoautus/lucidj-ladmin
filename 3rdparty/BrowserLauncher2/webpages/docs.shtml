<!-- $Id: docs.shtml,v 1.8 2007/08/30 19:51:07 jchapman0 Exp $ -->
<html>
<head>
	<title>BrowserLauncher2 Documentation Page</title>
    <link rel="stylesheet" href="browserlauncherweb.css" type="text/css" media="screen">
</head>
<body>
<!--#include virtual="header.shtml" -->
<div class="content">
<!--#include virtual="sidebar.shtml" -->
<div class="contentText">
<h1><a name="qsguide">Quick Start Guide</a></h1>
<ul>
	<li><b>Step 1</b>: Download BrowserLauncher2.jar from SourceForge.</li>
	<li><b>Step 2</b>: Place BrowserLauncher2.jar in your classpath.</li>
	<li><b>Step 3</b>: Create an instance of BrowserLauncher.<br/><code>BrowserLauncher launcher = new BrowserLauncher();</code></li>
	<li><b>Step 4</b>: Launch a browser with a url.<br/><code>launcher.openURLinBrowser("http://www.google.com");</code></li>
</ul>
<hr/>
<h1><a name="files">Download Files</a></h1>
<table border="1" cellpadding="2" cellspacing="2">
	<tr class="header2" valign="top">
		<td>File</td>
		<td>Description</td>
	</tr>
	<tr valign="top">
		<td>BrowserLauncher2.jar</td>
		<td>A small JAR file containing only the *.class files. This is intended to be included in (distributed) client applications that use BrowserLauncher2.</td>
	</tr>
	<tr valign="top">
		<td>BrowserLauncher2-all.jar</td>
		<td>A &ldquo;big&rdquo; JAR file again containing the class files. Additionally, it includes the source, Javadoc API documentation, and an application for testing the library. This jar is intended to be used by developers that want to develop applications that use BrowseLauncher2.</td>
	</tr>
</table>
<hr/>
<h1><a name="testapp">Test Application</a></h1>
<p>BrowserLauncher2-all.jar contains an application for testing the library. To invoke the test application, enter the following on a command line: <code>java -jar BrowserLauncher2-all.jar</code>. The application contains a text field for entering urls (you will need to include the protocol) and a text area that records information about your environment and captures stack traces and logging information.</p>
<p><img src="images/blaunchertestapp.jpg"/><br/><b>Image 1: Browser Launcher Test Application.</b></p>
<hr/>
<h1><a name="apinotes">API Notes</a></h1>
<p>The preferred method for using the BrowserLauncher2 api is to create an instance of BrowserLauncher (<code>edu.stanford.ejalbert.BrowserLauncher</code>) and invoke one of the openURLinBrowser methods:</p>
<ul>
<li><code>public void openURLinBrowser(String urlString)</code></li>
<li><code>public void openURLinBrowser(String browser, String urlString)</code></li>
<li><code>public void openURLinBrowser(List browsers, String urlString)</code></li>
</ul>
<p>The first method will invoke the user's default browser. The second and third methods are used for browser targetting which is duscussed below.</p>
<p>If the application will be invoking urls often, the application should wrap the BrowserLauncher instance with a singleton or use some mechanism to cache it for reuse. BrowserLauncher performs some initialization when the object is created and it would be highly inefficient to execute the initialization code every time a url is launched. There are three constructors for creating a BrowserLauncher instance:</p>
<ul>
<li><code>public BrowserLauncher()</code></li>
<li><code>public BrowserLauncher(AbstractLogger logger)</code></li>
<li><code>public BrowserLauncher(AbstractLogger logger, BrowserLauncherErrorHandler errorHandler)</code></li>
</ul>
<p>The first method uses the default logger and default error handler. The default logger ignores all logger messages. The default error handler will print a stack trace to the console if an exception is encountered. The errorHandler is used to catch and handle exceptions when executing the browser launch in a separate thread. Developers should extend AbstractLogger and BrowserLauncherErrorHandler to fit their application's needs. Take a look at the source code for the test application to see implementations of the logger and error handler interfaces.</p>
<h2><a name="browsertargetting">Browser Targetting</a></h2>
<p>Browser targetting provides an API for directing requests to a specific browser. This feature is fully supported on Unix/Linux and Windows but is not yet supported on Mac.</p>
<p>To use browser targetting, first call <code>public List getBrowserList()</code> to retrieve a list of available browsers. Select a name from the list of browsers and pass it with the url in the call to <code>public void openURLinBrowser(String browser, String urlString)</code>. Developers can also pass in a List of browser names. The browsers will be tried in order until one succeeds. If a browser targetting method fails, the library will fail over to the default launching method.</p>
<h2><a name="forcing_new_browser_win">Forcing a New Browser Window</a></h2>
<p>Browsers react differently when an instance is running and you request a new url to be opened. Some replace the current view; some open a new tab; and some open a new window. (See <a href="platformsupport.shtml#browser_behavior">Browser Behavior</a> on the Platform Support page for details.) The BrowserLauncher2 API allows users ask for new url requests to be opened in new windows. The behavior will differ depending on the OS and the browser being targetted.</p>
<ul>
<li><code>public boolean getNewWindowPolicy()</code> Returns the policy used for opening a url in a browser. If the policy is true, an attempt will be made to force the url to be opened in a new instance (window) of the browser.</li>
<li><code>public void setNewWindowPolicy(boolean forceNewWindow)</code> Sets the policy used for opening a url in a browser.</li>
</ul>
<h2><a name="defbrowserfromsysprop">Default Browser from System Property</a></h2>
<p>Another option for selecting a browser is to let the user pick the browser. The name of the preferred browser can be stored in the System properties using the key <code>edu.stanford.ejalbert.preferred.browser</code>. This key should be referenced using <code>IBrowserLaunching.BROWSER_SYSTEM_PROPERTY</code>. When launching a url using the default browser (<code>public void openURLinBrowser(String urlString)</code>), the browser system property will be checked. If it is set to a valid browser, the library will direct the requested url to the specified browser.</p>
<p>The <code>edu.stanford.ejalbert.browserprefui</code> package contains an action class and a dialog for offering browser choices to the user and storing the user's selection in the browser system property. This code can be called directly from your application or used as the basis for your own code. To call it directly, associate a menu item or button with the action class <code class="codetext">BrowserPrefAction</code>.</p>
<p><img src="images/blauncherbrowserprefdlg.jpg"/><br/><b>Image 2: Preferred Browser Selection Dialog.</b></p>

<h2><a name="browdiscprop">Browser Discovery Property (Windows only)</a></h2>
<p>There are two ways to discover which browsers a user has on his system. The preferred method is to look in the registry. The secondary method is to look through the Program Files folder. Both methods have problems.</p>
<p>For the registry method:
<ul>
<li>Access can be denied for security reasons.</li>
<li>Applications do not consistently add entries to the registry.</li>
</ul>
</p>
<p>We believe the access problems have been addressed. As of release 1.3, BrowserLaucher2 is using the <a href="http://sourceforge.net/projects/java-registry">Pure Java registry wrapper for Windows</a> library to read the registry.</p>
<p>For the file path method:
<ul>
<li>Applications must be consistent with the folder names used in the Program Files folder.</li>
</ul>
</p>
<p>The default behavior under all versions of Windows is to first search the registry for browsers then search the Program Files folder for any browsers that are not found in the registry. If a user has problems accessing the registry, the library can be told to skip the registry search. This behavior is controlled by the system property <code>win.browser.disc.policy</code> defined in <code>BrowserLauncher.WINDOWS_BROWSER_DISC_POLICY_PROPERTY</code>. BrowserLauncher2 recognizes two values for this property: <code>registry</code> (<code>BrowserLauncher.WINDOWS_BROWSER_DISC_POLICY_REGISTRY</code>) and <code>disk</code> (<code>BrowserLauncher.WINDOWS_BROWSER_DISC_POLICY_DISK</code>).
</p>

<p>The policy can be set at application start-up from the command line using: <code>-Dwin.browser.disc.policy=disk</code>. It can also be set in the code using <code>System.setProperty(BrowserLauncher.WINDOWS_BROWSER_DISC_POLICY_PROPERTY, BrowserLauncher.WINDOWS_BROWSER_DISC_POLICY_DISK)</code>. The call to <code>System.setProperty()</code> must be made <b>before</b> the call to create a browser launcher instance: <code>BrowserLauncher launcher = new BrowserLauncher();</code>.</p>

<h2><a name="logging">Logging</a></h2>
<p>BrowserLauncher2 uses a subset of WrapLog 1.1 for logging. If you do not specify a logger instance, a default logger (NoneLogger) will be used. The default logger does not log anything.</p>
<p>For more information on using WrapLog, see <a href="http://sourceforge.net/projects/wraplog">http://sourceforge.net/projects/wraplog</a>.</p>
</div> <!-- end of contentText div -->
<!--#include virtual="footer.shtml" -->
</div> <!-- end of content div -->
</body>
</html>
